;
;
;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <mega32.h>
;#include <alcd.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include <delay.h>
;
;
;unsigned char EEPROM_read(unsigned char uiAddress);
;void EEPROM_write(unsigned char uiAddress, unsigned char ucData);
;
;
;enum SYSTEM_STATE {UNLOCKED , LOCKED, SETPASSWORD };
;enum SYSTEM_STATE systemstate  = SETPASSWORD ;
;
;
;int s = 0;
;int m = 0;
;int h = 0;
;
;char buffer[16];
;int flag = 0;
;
;unsigned char keypadPatterns[12] = {0x7d,0xbd,0xdd,0xed,0x7b,0xbb,0xdb,0xeb,0x77,0xb7,0xd7,0xe7}; // 10 -> * , 11 -> #

	.DSEG
;
;int new_key;
;int pressed_key;
;
;void main(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0021    // char data[5];
; 0000 0022     // unsigned char password_set;
; 0000 0023 
; 0000 0024 
; 0000 0025    // EEPROM_write(201,2);
; 0000 0026   //  if(EEPROM_read(200) == 0)
; 0000 0027         //systemstate = locked;
; 0000 0028 
; 0000 0029 
; 0000 002A     unsigned char password_length;
; 0000 002B     unsigned char password [10];                     // digits of password are stored in this array.
; 0000 002C     int i;
; 0000 002D 
; 0000 002E     lcd_init(40);
;PCODE: $0000000E VOL: 0
;	password_length -> R17
;	password -> Y+0
;	i -> R18,R19
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002F     lcd_clear();                                    // lcd initial settings
;PCODE: $00000011 VOL: 0
; 0000 0030 
; 0000 0031 
; 0000 0032 
; 0000 0033     DDRC = 0xf0;                                   // port C settings, connected to keypad
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0034     PORTC = 0x0e;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0035 
; 0000 0036 
; 0000 0037     DDRB.2 = 0;                                    // INT2 port
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0038     PORTB.2 = 1;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0039 
; 0000 003A     GICR = 1 << INT2;                              // enable INT2
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003B     MCUCSR &= ~(1 << ISC2);                        // falling edge for INT2
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 003C 
; 0000 003D     lcd_gotoxy(0,1);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003E     sprintf(buffer, "%d%d:%d%d:%d%d" ,h/10,h%10,m/10,m%10,s/10,s%10);  // initialize lcd
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003F     lcd_puts(buffer);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0040 
; 0000 0041 
; 0000 0042 
; 0000 0043 
; 0000 0044     OCR1AH = 0x3D;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0045     OCR1AL = 0x09;                                  // OCR1A = ox3D09 = 15625 --> 15625 * 64 / 1000000 = 1 second
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0046 
; 0000 0047     #asm("sei");                                    // globally enable interrupts
;PCODE: $00000050 VOL: 0
	sei
;PCODE: $00000051 VOL: 0
; 0000 0048     TIMSK |= (1 << TOIE1) | (1 << OCIE1A) ;         // enable timer/counter 1 interrupt and timer/counter 1 compare matc ...
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0049 
; 0000 004A     TCCR1B = 0x0B;                                  // f(t/c) = f(IO) / 64 from prescaler || enable CTC mode and set TOP ...
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 004B 
; 0000 004C 
; 0000 004D     DDRB.0 = DDRB.1 = 1; // pin.0 for yellow LED and pin.1 for green LED.
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 004E 
; 0000 004F 
; 0000 0050     DDRD.2 = DDRD.3 = 0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0051     PORTD.2 = PORTD.3 = 1; //pull up
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0052 
; 0000 0053     MCUCR |= 0<<ISC00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0054     MCUCR |= 1<<ISC01; // falling edge.
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0055     GICR |= 1<<INT0;  // enable INT0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0056 
; 0000 0057     MCUCR |= 0<<ISC10;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0058     MCUCR |= 1<<ISC11; // falling edge
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0059     GICR |= 1<<INT1;  // enable INT1
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005A 
; 0000 005B 
; 0000 005C     while(1){
;PCODE: $00000075 VOL: 0
; 0000 005D         if(systemstate == LOCKED){
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 005E             char stars[10] = {0};
; 0000 005F             char temp[5];
; 0000 0060             int wrong_pass = 0;
; 0000 0061             lcd_clear();
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;	password -> Y+17
;	stars -> Y+7
;	temp -> Y+2
;	wrong_pass -> Y+0
;PCODE: $0000007E VOL: 0
; 0000 0062             lcd_gotoxy(0,0);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0063             lcd_putsf("Locked. Enter your password:");
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0064             for(i = 0; i<password_length; i++){
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0065 
; 0000 0066                  while(new_key == 0 );
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0067                  new_key = 0;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0068                  lcd_gotoxy(0,1);
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0069                  lcd_puts(stars);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 006A                  stars[i]='*';
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 006B                  itoa(pressed_key,temp);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 006C                  lcd_puts(temp);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 006D                  if(pressed_key != password[i])
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 006E                     wrong_pass = 1;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 006F 
; 0000 0070                 }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0071 
; 0000 0072                 if(wrong_pass == 0)
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0073                     systemstate = UNLOCKED;
;PCODE: $000000BB VOL: 0
; 0000 0074             }
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0075         if(systemstate == UNLOCKED){
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0076             lcd_clear();
;PCODE: $000000C1 VOL: 0
; 0000 0077             lcd_putsf("Unlocked");
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0078         }
; 0000 0079 
; 0000 007A         if(systemstate == SETPASSWORD){
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 007B             char temp[5];
; 0000 007C             char stars[10];
; 0000 007D             lcd_clear();
;PCODE: $000000C9 VOL: 0
;	password -> Y+15
;	temp -> Y+10
;	stars -> Y+0
;PCODE: $000000CA VOL: 0
; 0000 007E             lcd_gotoxy(0,0);
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 007F             lcd_putsf("set password(4-9 digits):");
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0080             while (new_key ==0);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0081             new_key =0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0082             password_length = pressed_key % 10;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0083             if(password_length < 4)
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0084                 password_length = 4;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0085             /////////////////////////////////write in eeprom
; 0000 0086             itoa(password_length,temp);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0087             lcd_gotoxy(0,0);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0088             lcd_putsf("Enter your password(");
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0089             lcd_puts(temp);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 008A             lcd_putsf(" digits):");
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 008B             for(i = 0; i<password_length; i++){
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 008C 
; 0000 008D                  while(new_key == 0 );
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 008E                  new_key = 0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 008F                  password[i] = pressed_key;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0090                  lcd_gotoxy(0,1);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0091                  lcd_puts(stars);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0092                  stars[i]='*';
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0093                  itoa(pressed_key,temp);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0094                  lcd_puts(temp);
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0095 
; 0000 0096                 }
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0097             systemstate = LOCKED ;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0098             lcd_clear();
;PCODE: $00000124 VOL: 0
; 0000 0099             lcd_gotoxy(0,0);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 009A             lcd_putsf("Password is set, press any key ...");
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 009B             while ( new_key == 0);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 009C             new_key = 0;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 009D         }
;PCODE: $00000134 VOL: 0
; 0000 009E 
; 0000 009F 
; 0000 00A0     }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00A1 
; 0000 00A2 
; 0000 00A3 }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;
;
;interrupt[TIM1_COMPA] void comparematch(void){     // interrupt happens every second
; 0000 00A6 interrupt[8] void comparematch(void){
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00A7 
; 0000 00A8 
; 0000 00A9 
; 0000 00AA 
; 0000 00AB     if (flag == 0){
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00AC         PORTB.0 = 0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00AD         PORTB.1 = 0;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00AE         //Second
; 0000 00AF         s = s + 1;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00B0         if (s == 60) {
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00B1             s = 0;
;PCODE: $0000014A VOL: 0
; 0000 00B2             m++;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00B3             PORTB.0 = 1;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00B4         }
; 0000 00B5         //Min
; 0000 00B6         if (m == 60 ) {
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00B7             m = 0;
;PCODE: $00000154 VOL: 0
; 0000 00B8             h++;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00B9             PORTB.1 = 1;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00BA         }
; 0000 00BB         //Hour
; 0000 00BC         if (h == 24){
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00BD             h = 0;
;PCODE: $0000015E VOL: 0
; 0000 00BE         }
; 0000 00BF     }
;PCODE: $0000015F VOL: 0
; 0000 00C0 
; 0000 00C1     lcd_gotoxy(0,1);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00C2     sprintf(buffer, "%d%d:%d%d:%d%d" ,h/10,h%10,m/10,m%10,s/10,s%10);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00C3     // lcd_puts(buffer);
; 0000 00C4 
; 0000 00C5 }
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;
;interrupt [EXT_INT0] void onPause (void){
; 0000 00C7 interrupt [2] void onPause (void){
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00C8     if (flag == 1) flag = 0;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00C9     else if (flag == 0) flag = 1;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00CA }
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;
;interrupt [EXT_INT1] void onReStart (void){
; 0000 00CC interrupt [3] void onReStart (void){
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00CD     s = 0;
;PCODE: $000001A2 VOL: 0
; 0000 00CE     m = 0;
;PCODE: $000001A3 VOL: 0
; 0000 00CF     h = 0;
;PCODE: $000001A4 VOL: 0
; 0000 00D0 }
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;
;
;interrupt [EXT_INT2] void keyPressed(void){
; 0000 00D3 interrupt [4] void keyPressed(void){
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00D4 
; 0000 00D5 
; 0000 00D6 
; 0000 00D7    // find key
; 0000 00D8     char data[5];
; 0000 00D9     int i,index;
; 0000 00DA     unsigned char pattern;
; 0000 00DB     // delay_ms(20);   debounce
; 0000 00DC 
; 0000 00DD     new_key = 1;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;	data -> Y+6
;	i -> R16,R17
;	index -> R18,R19
;	pattern -> R21
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00DE 
; 0000 00DF 
; 0000 00E0     DDRC |= 0xf0;                       // leaves portc.0 unchanged. portc.0 is connected to sensor and used by ADC.
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00E1     DDRC &= 0xf1;                       // same as above
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00E2     PORTC &= 0x0f;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00E3     PORTC |= 0x0e;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00E4     delay_us(5);
;PCODE: $000001BA VOL: 0
; 0000 00E5     pattern = (PINC & 0b00001111);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00E6     DDRC |= 0x0e;
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00E7     DDRC &= 0x0f;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 00E8     PORTC |= 0xf0;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00E9     PORTC &= 0xf1;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 00EA     delay_us(5);
;PCODE: $000001CA VOL: 0
; 0000 00EB     pattern |= (PINC & 0b11110000) | 0x01;    // lsb is not connected to keypad, always gets the value 1
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00EC     for(i = 0 ; i < 12 ; i++){
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00ED         if(keypadPatterns[i] == pattern){
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00EE             pressed_key = i;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 00EF             break;
;PCODE: $000001E0 VOL: 0
; 0000 00F0             }
; 0000 00F1 
; 0000 00F2     }
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 00F3 
; 0000 00F4 
; 0000 00F5 
; 0000 00F6 
; 0000 00F7 
; 0000 00F8 }
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;
;
;void EEPROM_write(unsigned char uiAddress, unsigned char ucData){ // address is in 0-255 range
; 0000 00FB void EEPROM_write(unsigned char uiAddress, unsigned char ucData){
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 00FC     /* Wait for completion of previous write */
; 0000 00FD     while(EECR & (1<<EEWE));
;PCODE: $000001EE VOL: 0
;	uiAddress -> Y+1
;	ucData -> Y+0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 00FE     /* Set up address and data registers */
; 0000 00FF     EEARH = 0;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0100     EEARL = uiAddress;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0101 
; 0000 0102     EEDR = ucData;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0103     /* Write logical one to EEMWE */
; 0000 0104     EECR |= (1<<EEMWE);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0105     /* Start eeprom write by setting EEWE */
; 0000 0106     EECR |= (1<<EEWE);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0107 }
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;
;
;unsigned char EEPROM_read(unsigned char uiAddress){     // address is in 0-255 range
; 0000 010A unsigned char EEPROM_read(unsigned char uiAddress){
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 010B     /* Wait for completion of previous write */
; 0000 010C     while(EECR & (1<<EEWE));
;PCODE: $00000204 VOL: 0
;	uiAddress -> Y+0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 010D     /* Set up address register */
; 0000 010E     EEARH = 0;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 010F     EEARL = uiAddress;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0110     /* Start eeprom read by writing EERE */
; 0000 0111     EECR |= (1<<EERE);
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0112     /* Return data from data register */
; 0000 0113     return EEDR;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0114 }
;PCODE: $00000214 VOL: 0

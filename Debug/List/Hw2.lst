
AVRASM ver. 2.1.30  C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm Tue Oct 13 16:14:11 2020

C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _systemstate=R5
                 	.DEF _s=R6
                 	.DEF _s_msb=R7
                 	.DEF _m=R8
                 	.DEF _m_msb=R9
                 	.DEF _h=R10
                 	.DEF _h_msb=R11
                 	.DEF _flag=R12
                 	.DEF _flag_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 009f 	JMP  __RESET
000002 940c 023a 	JMP  _onPause
000004 940c 0253 	JMP  _onReStart
000006 940c 025e 	JMP  _keyPressed
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 01f6 	JMP  _comparematch
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0002
000034 0000      	.DB  0x2,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1137): warning: .cseg .db misalignment - padding zero byte
000037 0000      	.DB  0x0
                 
                 _0x3:
000038 bd7d
000039 eddd
00003a bb7b
00003b ebdb      	.DB  0x7D,0xBD,0xDD,0xED,0x7B,0xBB,0xDB,0xEB
00003c b777
00003d e7d7      	.DB  0x77,0xB7,0xD7,0xE7
                 _0x1C:
00003e 0000
00003f 0000
000040 0000
000041 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000042 0000
000043 0000
000044 0000
000045 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1145): warning: .cseg .db misalignment - padding zero byte
000046 0000      	.DB  0x0
                 _0x0:
000047 6425
000048 6425
000049 253a
00004a 2564      	.DB  0x25,0x64,0x25,0x64,0x3A,0x25,0x64,0x25
00004b 3a64
00004c 6425
00004d 6425
00004e 4c00      	.DB  0x64,0x3A,0x25,0x64,0x25,0x64,0x0,0x4C
00004f 636f
000050 656b
000051 2e64
000052 4520      	.DB  0x6F,0x63,0x6B,0x65,0x64,0x2E,0x20,0x45
000053 746e
000054 7265
000055 7920
000056 756f      	.DB  0x6E,0x74,0x65,0x72,0x20,0x79,0x6F,0x75
000057 2072
000058 6170
000059 7373
00005a 6f77      	.DB  0x72,0x20,0x70,0x61,0x73,0x73,0x77,0x6F
00005b 6472
00005c 003a
00005d 6e55
00005e 6f6c      	.DB  0x72,0x64,0x3A,0x0,0x55,0x6E,0x6C,0x6F
00005f 6b63
000060 6465
000061 7300
000062 7465      	.DB  0x63,0x6B,0x65,0x64,0x0,0x73,0x65,0x74
000063 7020
000064 7361
000065 7773
000066 726f      	.DB  0x20,0x70,0x61,0x73,0x73,0x77,0x6F,0x72
000067 2864
000068 2d34
000069 2039
00006a 6964      	.DB  0x64,0x28,0x34,0x2D,0x39,0x20,0x64,0x69
00006b 6967
00006c 7374
00006d 3a29
00006e 4500      	.DB  0x67,0x69,0x74,0x73,0x29,0x3A,0x0,0x45
00006f 746e
000070 7265
000071 7920
000072 756f      	.DB  0x6E,0x74,0x65,0x72,0x20,0x79,0x6F,0x75
000073 2072
000074 6170
000075 7373
000076 6f77      	.DB  0x72,0x20,0x70,0x61,0x73,0x73,0x77,0x6F
000077 6472
000078 0028
000079 6150
00007a 7373      	.DB  0x72,0x64,0x28,0x0,0x50,0x61,0x73,0x73
00007b 6f77
00007c 6472
00007d 6920
00007e 2073      	.DB  0x77,0x6F,0x72,0x64,0x20,0x69,0x73,0x20
00007f 6573
000080 2c74
000081 7020
000082 6572      	.DB  0x73,0x65,0x74,0x2C,0x20,0x70,0x72,0x65
000083 7373
000084 6120
000085 796e
000086 6b20      	.DB  0x73,0x73,0x20,0x61,0x6E,0x79,0x20,0x6B
000087 7965
000088 2e20
000089 2e2e
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1163): warning: .cseg .db misalignment - padding zero byte
00008a 0000      	.DB  0x65,0x79,0x20,0x2E,0x2E,0x2E,0x0
                 _0x2000003:
00008b c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1167): warning: .cseg .db misalignment - padding zero byte
00008c 0001      	.DB  0x1
                 _0x2020000:
00008d 4e2d
00008e 4e41
00008f 4900
000090 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Markazi.co\Desktop\Microprocessor_Lab\HW2\Debug\List\Hw2.asm(1170): warning: .cseg .db misalignment - padding zero byte
000091 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000092 0009      	.DW  0x09
000093 0005      	.DW  0x05
000094 0066      	.DW  __REG_VARS*2
                 
000095 000c      	.DW  0x0C
000096 0270      	.DW  _keypadPatterns
000097 0070      	.DW  _0x3*2
                 
000098 0002      	.DW  0x02
000099 0280      	.DW  __base_y_G100
00009a 0116      	.DW  _0x2000003*2
                 
00009b 0001      	.DW  0x01
00009c 0287      	.DW  __seed_G101
00009d 0118      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00009e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00009f 94f8      	CLI
0000a0 27ee      	CLR  R30
0000a1 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a2 e0f1      	LDI  R31,1
0000a3 bffb      	OUT  GICR,R31
0000a4 bfeb      	OUT  GICR,R30
0000a5 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000a6 e08d      	LDI  R24,(14-2)+1
0000a7 e0a2      	LDI  R26,2
0000a8 27bb      	CLR  R27
                 __CLEAR_REG:
0000a9 93ed      	ST   X+,R30
0000aa 958a      	DEC  R24
0000ab f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ac e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ad e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000ae e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000af 93ed      	ST   X+,R30
0000b0 9701      	SBIW R24,1
0000b1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b2 e2e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000b3 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b4 9185      	LPM  R24,Z+
0000b5 9195      	LPM  R25,Z+
0000b6 9700      	SBIW R24,0
0000b7 f061      	BREQ __GLOBAL_INI_END
0000b8 91a5      	LPM  R26,Z+
0000b9 91b5      	LPM  R27,Z+
0000ba 9005      	LPM  R0,Z+
0000bb 9015      	LPM  R1,Z+
0000bc 01bf      	MOVW R22,R30
0000bd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000be 9005      	LPM  R0,Z+
0000bf 920d      	ST   X+,R0
0000c0 9701      	SBIW R24,1
0000c1 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c2 01fb      	MOVW R30,R22
0000c3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c4 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c5 bfed      	OUT  SPL,R30
0000c6 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c8 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c9 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ca 940c 00cc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;/*
                 ;password is 4445
                 ;*/
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega32.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;
                 ;unsigned char EEPROM_read(unsigned char uiAddress);
                 ;void EEPROM_write(unsigned char uiAddress, unsigned char ucData);
                 ;
                 ;
                 ;enum SYSTEM_STATE {UNLOCKED , LOCKED, SETPASSWORD };
                 ;enum SYSTEM_STATE systemstate  = SETPASSWORD ;
                 ;
                 ;
                 ;int s = 0;
                 ;int m = 0;
                 ;int h = 0;
                 ;
                 ;char buffer[16];
                 ;int flag = 0;
                 ;
                 ;unsigned char keypadPatterns[12] = {0x7d,0xbd,0xdd,0xed,0x7b,0xbb,0xdb,0xeb,0x77,0xb7,0xd7,0xe7}; // 10 -> * , 11 -> #
                 
                 	.DSEG
                 ;
                 ;int new_key;
                 ;int pressed_key;
                 ;
                 ;void main(void)
                 ; 0000 0023 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0024 
                 ; 0000 0025 
                 ; 0000 0026 
                 ; 0000 0027     // EEPROM_write(100,0xff);                       //uncomment this line to set a new password
                 ; 0000 0028     unsigned char password_length;
                 ; 0000 0029     unsigned char password [10];                     // digits of password are stored in this array.
                 ; 0000 002A     int i;
                 ; 0000 002B 
                 ; 0000 002C 
                 ; 0000 002D 
                 ; 0000 002E     lcd_init(40);
0000cc 972a      	SBIW R28,10
                 ;	password_length -> R17
                 ;	password -> Y+0
                 ;	i -> R18,R19
0000cd e2a8      	LDI  R26,LOW(40)
0000ce 940e 0349 	CALL _lcd_init
                 ; 0000 002F     lcd_clear();                                    // lcd initial settings
0000d0 940e 02f9 	CALL _lcd_clear
                 ; 0000 0030 
                 ; 0000 0031     if(EEPROM_read(100) == 0){                      // check to see if device has a password.
0000d2 e6a4      	LDI  R26,LOW(100)
0000d3 d1ea      	RCALL _EEPROM_read
0000d4 30e0      	CPI  R30,0
0000d5 f4c9      	BRNE _0x4
                 ; 0000 0032 
                 ; 0000 0033         systemstate = LOCKED;
0000d6 e0e1      	LDI  R30,LOW(1)
0000d7 2e5e      	MOV  R5,R30
                 ; 0000 0034         password_length = EEPROM_read(101);
0000d8 e6a5      	LDI  R26,LOW(101)
0000d9 d1e4      	RCALL _EEPROM_read
0000da 2f1e      	MOV  R17,R30
                 ; 0000 0035 
                 ; 0000 0036         for(i =0 ; i < password_length ; i++){
                +
0000db e020     +LDI R18 , LOW ( 0 )
0000dc e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x6:
0000dd 940e 0566 	CALL SUBOPT_0x0
0000df f47c      	BRGE _0x7
                 ; 0000 0037             password[i] = EEPROM_read(102+i);
0000e0 01f9      	MOVW R30,R18
0000e1 01de      	MOVW R26,R28
0000e2 0fea      	ADD  R30,R26
0000e3 1ffb      	ADC  R31,R27
0000e4 93ff      	PUSH R31
0000e5 93ef      	PUSH R30
0000e6 2fa2      	MOV  R26,R18
0000e7 59aa      	SUBI R26,-LOW(102)
0000e8 d1d5      	RCALL _EEPROM_read
0000e9 91af      	POP  R26
0000ea 91bf      	POP  R27
0000eb 93ec      	ST   X,R30
                 ; 0000 0038             }
                +
0000ec 5f2f     +SUBI R18 , LOW ( - 1 )
0000ed 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000ee cfee      	RJMP _0x6
                 _0x7:
                 ; 0000 0039 
                 ; 0000 003A         }
                 ; 0000 003B 
                 ; 0000 003C     DDRC = 0xf0;                                   // port C settings, connected to keypad
                 _0x4:
0000ef efe0      	LDI  R30,LOW(240)
0000f0 bbe4      	OUT  0x14,R30
                 ; 0000 003D     PORTC = 0x0e;
0000f1 e0ee      	LDI  R30,LOW(14)
0000f2 bbe5      	OUT  0x15,R30
                 ; 0000 003E 
                 ; 0000 003F 
                 ; 0000 0040     DDRB.2 = 0;                                    // INT2 port
0000f3 98ba      	CBI  0x17,2
                 ; 0000 0041     PORTB.2 = 1;
0000f4 9ac2      	SBI  0x18,2
                 ; 0000 0042 
                 ; 0000 0043     GICR = 1 << INT2;                              // enable INT2
0000f5 e2e0      	LDI  R30,LOW(32)
0000f6 bfeb      	OUT  0x3B,R30
                 ; 0000 0044     MCUCSR &= ~(1 << ISC2);                        // falling edge for INT2
0000f7 b7e4      	IN   R30,0x34
0000f8 7bef      	ANDI R30,0xBF
0000f9 bfe4      	OUT  0x34,R30
                 ; 0000 0045 
                 ; 0000 0046     lcd_gotoxy(0,1);
0000fa 940e 056c 	CALL SUBOPT_0x1
                 ; 0000 0047     sprintf(buffer, "%d%d:%d%d:%d%d" ,h/10,h%10,m/10,m%10,s/10,s%10);  // initialize lcd
0000fc 940e 0571 	CALL SUBOPT_0x2
                 ; 0000 0048     lcd_puts(buffer);
0000fe e6a0      	LDI  R26,LOW(_buffer)
0000ff e0b2      	LDI  R27,HIGH(_buffer)
000100 940e 0327 	CALL _lcd_puts
                 ; 0000 0049 
                 ; 0000 004A 
                 ; 0000 004B 
                 ; 0000 004C 
                 ; 0000 004D     OCR1AH = 0x3D;
000102 e3ed      	LDI  R30,LOW(61)
000103 bdeb      	OUT  0x2B,R30
                 ; 0000 004E     OCR1AL = 0x09;                                  // OCR1A = ox3D09 = 15625 --> 15625 * 64 / 1000000 = 1 second
000104 e0e9      	LDI  R30,LOW(9)
000105 bdea      	OUT  0x2A,R30
                 ; 0000 004F 
                 ; 0000 0050     #asm("sei");                                    // globally enable interrupts
000106 9478      	sei
                 ; 0000 0051     TIMSK |= (1 << TOIE1) | (1 << OCIE1A) ;         // enable timer/counter 1 interrupt and timer/counter 1 compare matc ...
000107 b7e9      	IN   R30,0x39
000108 61e4      	ORI  R30,LOW(0x14)
000109 bfe9      	OUT  0x39,R30
                 ; 0000 0052 
                 ; 0000 0053     TCCR1B = 0x0B;                                  // f(t/c) = f(IO) / 64 from prescaler || enable CTC mode and set TOP ...
00010a e0eb      	LDI  R30,LOW(11)
00010b bdee      	OUT  0x2E,R30
                 ; 0000 0054 
                 ; 0000 0055 
                 ; 0000 0056     DDRB.0 = DDRB.1 = 1;                            // pin.0 for yellow LED and pin.1 for green LED.
00010c 9ab9      	SBI  0x17,1
00010d 9ab8      	SBI  0x17,0
                 ; 0000 0057 
                 ; 0000 0058 
                 ; 0000 0059     DDRD.2 = DDRD.3 = 0;
00010e 988b      	CBI  0x11,3
00010f 988a      	CBI  0x11,2
                 ; 0000 005A     PORTD.2 = PORTD.3 = 1;                          //pull up
000110 9a93      	SBI  0x12,3
000111 9a92      	SBI  0x12,2
                 ; 0000 005B 
                 ; 0000 005C     MCUCR |= 0<<ISC00;
000112 b7e5      	IN   R30,0x35
000113 bfe5      	OUT  0x35,R30
                 ; 0000 005D     MCUCR |= 1<<ISC01;                              // falling edge.
000114 b7e5      	IN   R30,0x35
000115 60e2      	ORI  R30,2
000116 bfe5      	OUT  0x35,R30
                 ; 0000 005E     GICR |= 1<<INT0;                                // enable INT0
000117 b7eb      	IN   R30,0x3B
000118 64e0      	ORI  R30,0x40
000119 bfeb      	OUT  0x3B,R30
                 ; 0000 005F 
                 ; 0000 0060     MCUCR |= 0<<ISC10;
00011a b7e5      	IN   R30,0x35
00011b bfe5      	OUT  0x35,R30
                 ; 0000 0061     MCUCR |= 1<<ISC11;                              // falling edge
00011c b7e5      	IN   R30,0x35
00011d 60e8      	ORI  R30,8
00011e bfe5      	OUT  0x35,R30
                 ; 0000 0062     GICR |= 1<<INT1;                                // enable INT1
00011f b7eb      	IN   R30,0x3B
000120 68e0      	ORI  R30,0x80
000121 bfeb      	OUT  0x3B,R30
                 ; 0000 0063 
                 ; 0000 0064 
                 ; 0000 0065     while(1){
                 _0x18:
                 ; 0000 0066         if(systemstate == LOCKED){
000122 e0e1      	LDI  R30,LOW(1)
000123 15e5      	CP   R30,R5
000124 f009      	BREQ PC+2
000125 c044      	RJMP _0x1B
                 ; 0000 0067             char stars[10] = {0};
                 ; 0000 0068             char temp[5];
                 ; 0000 0069             int wrong_pass = 0;
                 ; 0000 006A             lcd_clear();
000126 9761      	SBIW R28,17
000127 e181      	LDI  R24,17
000128 e0a0      	LDI  R26,LOW(0)
000129 e0b0      	LDI  R27,HIGH(0)
00012a e7ec      	LDI  R30,LOW(_0x1C*2)
00012b e0f0      	LDI  R31,HIGH(_0x1C*2)
00012c 940e 0671 	CALL __INITLOCB
                 ;	password -> Y+17
                 ;	stars -> Y+7
                 ;	temp -> Y+2
                 ;	wrong_pass -> Y+0
00012e 940e 05b4 	CALL SUBOPT_0x3
                 ; 0000 006B             lcd_gotoxy(0,0);
                 ; 0000 006C             lcd_putsf("Locked. Enter your password:");
                +
000130 e9ad     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000131 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
000132 940e 0336 	CALL _lcd_putsf
                 ; 0000 006D             for(i = 0; i<password_length; i++){
                +
000134 e020     +LDI R18 , LOW ( 0 )
000135 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1E:
000136 940e 0566 	CALL SUBOPT_0x0
000138 f55c      	BRGE _0x1F
                 ; 0000 006E 
                 ; 0000 006F                  while(new_key == 0 );
                 _0x20:
000139 940e 05bb 	CALL SUBOPT_0x4
00013b f3e9      	BREQ _0x20
                 ; 0000 0070                  new_key = 0;
00013c 940e 05c1 	CALL SUBOPT_0x5
                 ; 0000 0071                  lcd_gotoxy(0,1);
00013e 940e 056c 	CALL SUBOPT_0x1
                 ; 0000 0072                  lcd_puts(stars);
000140 01de      	MOVW R26,R28
000141 9617      	ADIW R26,7
000142 940e 0327 	CALL _lcd_puts
                 ; 0000 0073                  stars[i]='*';
000144 01de      	MOVW R26,R28
000145 9617      	ADIW R26,7
000146 940e 05c7 	CALL SUBOPT_0x6
                 ; 0000 0074                  itoa(pressed_key,temp);
000148 01de      	MOVW R26,R28
000149 9614      	ADIW R26,4
00014a 940e 0377 	CALL _itoa
                 ; 0000 0075                  lcd_puts(temp);
00014c 01de      	MOVW R26,R28
00014d 9612      	ADIW R26,2
00014e 940e 0327 	CALL _lcd_puts
                 ; 0000 0076                  if(pressed_key != password[i])
000150 01de      	MOVW R26,R28
000151 9651      	ADIW R26,17
000152 0fa2      	ADD  R26,R18
000153 1fb3      	ADC  R27,R19
000154 91ec      	LD   R30,X
000155 91a0 027e 	LDS  R26,_pressed_key
000157 91b0 027f 	LDS  R27,_pressed_key+1
000159 e0f0      	LDI  R31,0
00015a 17ea      	CP   R30,R26
00015b 07fb      	CPC  R31,R27
00015c f021      	BREQ _0x23
                 ; 0000 0077                     wrong_pass = 1;
00015d e0e1      	LDI  R30,LOW(1)
00015e e0f0      	LDI  R31,HIGH(1)
00015f 83e8      	ST   Y,R30
000160 83f9      	STD  Y+1,R31
                 ; 0000 0078 
                 ; 0000 0079                 }
                 _0x23:
                +
000161 5f2f     +SUBI R18 , LOW ( - 1 )
000162 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000163 cfd2      	RJMP _0x1E
                 _0x1F:
                 ; 0000 007A 
                 ; 0000 007B                 if(wrong_pass == 0)
000164 81e8      	LD   R30,Y
000165 81f9      	LDD  R31,Y+1
000166 9730      	SBIW R30,0
000167 f409      	BRNE _0x24
                 ; 0000 007C                     systemstate = UNLOCKED;
000168 2455      	CLR  R5
                 ; 0000 007D             }
                 _0x24:
000169 9661      	ADIW R28,17
                 ; 0000 007E         if(systemstate == UNLOCKED){
                 _0x1B:
00016a 2055      	TST  R5
00016b f431      	BRNE _0x25
                 ; 0000 007F             lcd_clear();
00016c 940e 02f9 	CALL _lcd_clear
                 ; 0000 0080             lcd_putsf("Unlocked");
                +
00016e ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 44 ) )
00016f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 44 ) )
                 	__POINTW2FN _0x0,44
000170 940e 0336 	CALL _lcd_putsf
                 ; 0000 0081         }
                 ; 0000 0082 
                 ; 0000 0083         if(systemstate == SETPASSWORD){
                 _0x25:
000172 e0e2      	LDI  R30,LOW(2)
000173 15e5      	CP   R30,R5
000174 f009      	BREQ PC+2
000175 c07e      	RJMP _0x26
                 ; 0000 0084             char temp[5];
                 ; 0000 0085             char stars[10];
                 ; 0000 0086             lcd_clear();
000176 972f      	SBIW R28,15
                 ;	password -> Y+15
                 ;	temp -> Y+10
                 ;	stars -> Y+0
000177 940e 05b4 	CALL SUBOPT_0x3
                 ; 0000 0087             lcd_gotoxy(0,0);
                 ; 0000 0088             lcd_putsf("set password(4-9 digits):");
                +
000179 eca3     +LDI R26 , LOW ( 2 * _0x0 + ( 53 ) )
00017a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 53 ) )
                 	__POINTW2FN _0x0,53
00017b 940e 0336 	CALL _lcd_putsf
                 ; 0000 0089             while (new_key ==0);
                 _0x27:
00017d 940e 05bb 	CALL SUBOPT_0x4
00017f f3e9      	BREQ _0x27
                 ; 0000 008A             new_key =0;
000180 940e 05c1 	CALL SUBOPT_0x5
                 ; 0000 008B             password_length = pressed_key % 10;
000182 91a0 027e 	LDS  R26,_pressed_key
000184 91b0 027f 	LDS  R27,_pressed_key+1
000186 e0ea      	LDI  R30,LOW(10)
000187 e0f0      	LDI  R31,HIGH(10)
000188 940e 063a 	CALL __MODW21
00018a 2f1e      	MOV  R17,R30
                 ; 0000 008C 
                 ; 0000 008D             if(password_length < 4)                         // minimum length of password is 4 digits.
00018b 3014      	CPI  R17,4
00018c f408      	BRSH _0x2A
                 ; 0000 008E                 password_length = 4;
00018d e014      	LDI  R17,LOW(4)
                 ; 0000 008F 
                 ; 0000 0090 
                 ; 0000 0091             itoa(password_length,temp);
                 _0x2A:
00018e 2fe1      	MOV  R30,R17
00018f e0f0      	LDI  R31,0
000190 93fa      	ST   -Y,R31
000191 93ea      	ST   -Y,R30
000192 01de      	MOVW R26,R28
000193 961c      	ADIW R26,12
000194 940e 0377 	CALL _itoa
                 ; 0000 0092             lcd_gotoxy(0,0);
000196 e0e0      	LDI  R30,LOW(0)
000197 93ea      	ST   -Y,R30
000198 e0a0      	LDI  R26,LOW(0)
000199 940e 02e8 	CALL _lcd_gotoxy
                 ; 0000 0093             lcd_putsf("Enter your password(");
                +
00019b edad     +LDI R26 , LOW ( 2 * _0x0 + ( 79 ) )
00019c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 79 ) )
                 	__POINTW2FN _0x0,79
00019d 940e 0336 	CALL _lcd_putsf
                 ; 0000 0094             lcd_puts(temp);
00019f 01de      	MOVW R26,R28
0001a0 961a      	ADIW R26,10
0001a1 940e 0327 	CALL _lcd_puts
                 ; 0000 0095             lcd_putsf(" digits):");
                +
0001a3 eda3     +LDI R26 , LOW ( 2 * _0x0 + ( 69 ) )
0001a4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 69 ) )
                 	__POINTW2FN _0x0,69
0001a5 940e 0336 	CALL _lcd_putsf
                 ; 0000 0096             for(i = 0; i<password_length; i++){
                +
0001a7 e020     +LDI R18 , LOW ( 0 )
0001a8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x2C:
0001a9 940e 0566 	CALL SUBOPT_0x0
0001ab f504      	BRGE _0x2D
                 ; 0000 0097 
                 ; 0000 0098                  while(new_key == 0 );
                 _0x2E:
0001ac 940e 05bb 	CALL SUBOPT_0x4
0001ae f3e9      	BREQ _0x2E
                 ; 0000 0099                  new_key = 0;
0001af 940e 05c1 	CALL SUBOPT_0x5
                 ; 0000 009A                  password[i] = pressed_key;
0001b1 01f9      	MOVW R30,R18
0001b2 01de      	MOVW R26,R28
0001b3 961f      	ADIW R26,15
0001b4 0fea      	ADD  R30,R26
0001b5 1ffb      	ADC  R31,R27
0001b6 91a0 027e 	LDS  R26,_pressed_key
0001b8 83a0      	STD  Z+0,R26
                 ; 0000 009B                  lcd_gotoxy(0,1);
0001b9 940e 056c 	CALL SUBOPT_0x1
                 ; 0000 009C                  lcd_puts(stars);
0001bb 01de      	MOVW R26,R28
0001bc 940e 0327 	CALL _lcd_puts
                 ; 0000 009D                  stars[i]='*';
0001be 01de      	MOVW R26,R28
0001bf 940e 05c7 	CALL SUBOPT_0x6
                 ; 0000 009E                  itoa(pressed_key,temp);
0001c1 01de      	MOVW R26,R28
0001c2 961c      	ADIW R26,12
0001c3 940e 0377 	CALL _itoa
                 ; 0000 009F                  lcd_puts(temp);
0001c5 01de      	MOVW R26,R28
0001c6 961a      	ADIW R26,10
0001c7 940e 0327 	CALL _lcd_puts
                 ; 0000 00A0 
                 ; 0000 00A1                 }
                +
0001c9 5f2f     +SUBI R18 , LOW ( - 1 )
0001ca 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001cb cfdd      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00A2             #asm("cli");                                    // disable interrupts during eeprom write
0001cc 94f8      	cli
                 ; 0000 00A3             EEPROM_write(100,0);
0001cd e6e4      	LDI  R30,LOW(100)
0001ce 93ea      	ST   -Y,R30
0001cf e0a0      	LDI  R26,LOW(0)
0001d0 d0e1      	RCALL _EEPROM_write
                 ; 0000 00A4             EEPROM_write(101,password_length);
0001d1 e6e5      	LDI  R30,LOW(101)
0001d2 93ea      	ST   -Y,R30
0001d3 2fa1      	MOV  R26,R17
0001d4 d0dd      	RCALL _EEPROM_write
                 ; 0000 00A5 
                 ; 0000 00A6             for (i =0 ; i< password_length ; i++)
                +
0001d5 e020     +LDI R18 , LOW ( 0 )
0001d6 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x32:
0001d7 940e 0566 	CALL SUBOPT_0x0
0001d9 f464      	BRGE _0x33
                 ; 0000 00A7                 EEPROM_write(102+i,password[i]);
0001da 2fe2      	MOV  R30,R18
0001db 59ea      	SUBI R30,-LOW(102)
0001dc 93ea      	ST   -Y,R30
0001dd 01de      	MOVW R26,R28
0001de 9650      	ADIW R26,16
0001df 0fa2      	ADD  R26,R18
0001e0 1fb3      	ADC  R27,R19
0001e1 91ac      	LD   R26,X
0001e2 d0cf      	RCALL _EEPROM_write
                +
0001e3 5f2f     +SUBI R18 , LOW ( - 1 )
0001e4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001e5 cff1      	RJMP _0x32
                 _0x33:
                 ; 0000 00A8 #asm("sei");
0001e6 9478      	sei
                 ; 0000 00A9             systemstate = LOCKED ;
0001e7 e0e1      	LDI  R30,LOW(1)
0001e8 2e5e      	MOV  R5,R30
                 ; 0000 00AA             lcd_clear();
0001e9 940e 05b4 	CALL SUBOPT_0x3
                 ; 0000 00AB             lcd_gotoxy(0,0);
                 ; 0000 00AC             lcd_putsf("Password is set, press any key ...");
                +
0001eb efa2     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0001ec e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0001ed d148      	RCALL _lcd_putsf
                 ; 0000 00AD             while ( new_key == 0);
                 _0x34:
0001ee 940e 05bb 	CALL SUBOPT_0x4
0001f0 f3e9      	BREQ _0x34
                 ; 0000 00AE             new_key = 0;
0001f1 940e 05c1 	CALL SUBOPT_0x5
                 ; 0000 00AF         }
0001f3 962f      	ADIW R28,15
                 ; 0000 00B0 
                 ; 0000 00B1 
                 ; 0000 00B2     }
                 _0x26:
0001f4 cf2d      	RJMP _0x18
                 ; 0000 00B3 
                 ; 0000 00B4 
                 ; 0000 00B5 }
                 _0x37:
0001f5 cfff      	RJMP _0x37
                 ; .FEND
                 ;
                 ;
                 ;interrupt[TIM1_COMPA] void comparematch(void){                      // interrupt happens every second
                 ; 0000 00B8 interrupt[8] void comparematch(void){
                 _comparematch:
                 ; .FSTART _comparematch
0001f6 920a      	ST   -Y,R0
0001f7 921a      	ST   -Y,R1
0001f8 92fa      	ST   -Y,R15
0001f9 936a      	ST   -Y,R22
0001fa 937a      	ST   -Y,R23
0001fb 938a      	ST   -Y,R24
0001fc 939a      	ST   -Y,R25
0001fd 93aa      	ST   -Y,R26
0001fe 93ba      	ST   -Y,R27
0001ff 93ea      	ST   -Y,R30
000200 93fa      	ST   -Y,R31
000201 b7ef      	IN   R30,SREG
000202 93ea      	ST   -Y,R30
                 ; 0000 00B9 
                 ; 0000 00BA 
                 ; 0000 00BB 
                 ; 0000 00BC 
                 ; 0000 00BD     if (flag == 0){
000203 2c0c      	MOV  R0,R12
000204 280d      	OR   R0,R13
000205 f511      	BRNE _0x38
                 ; 0000 00BE         PORTB.0 = 0;
000206 98c0      	CBI  0x18,0
                 ; 0000 00BF         PORTB.1 = 0;
000207 98c1      	CBI  0x18,1
                 ; 0000 00C0         //Second
                 ; 0000 00C1         s = s + 1;
000208 01f3      	MOVW R30,R6
000209 9631      	ADIW R30,1
00020a 013f      	MOVW R6,R30
                 ; 0000 00C2         if (s == 60) {
00020b e3ec      	LDI  R30,LOW(60)
00020c e0f0      	LDI  R31,HIGH(60)
00020d 15e6      	CP   R30,R6
00020e 05f7      	CPC  R31,R7
00020f f431      	BRNE _0x3D
                 ; 0000 00C3             s = 0;
000210 2466      	CLR  R6
000211 2477      	CLR  R7
                 ; 0000 00C4             m++;
000212 01f4      	MOVW R30,R8
000213 9631      	ADIW R30,1
000214 014f      	MOVW R8,R30
                 ; 0000 00C5             PORTB.0 = 1;
000215 9ac0      	SBI  0x18,0
                 ; 0000 00C6         }
                 ; 0000 00C7         //Min
                 ; 0000 00C8         if (m == 60 ) {
                 _0x3D:
000216 e3ec      	LDI  R30,LOW(60)
000217 e0f0      	LDI  R31,HIGH(60)
000218 15e8      	CP   R30,R8
000219 05f9      	CPC  R31,R9
00021a f431      	BRNE _0x40
                 ; 0000 00C9             m = 0;
00021b 2488      	CLR  R8
00021c 2499      	CLR  R9
                 ; 0000 00CA             h++;
00021d 01f5      	MOVW R30,R10
00021e 9631      	ADIW R30,1
00021f 015f      	MOVW R10,R30
                 ; 0000 00CB             PORTB.1 = 1;
000220 9ac1      	SBI  0x18,1
                 ; 0000 00CC         }
                 ; 0000 00CD         //Hour
                 ; 0000 00CE         if (h == 24){
                 _0x40:
000221 e1e8      	LDI  R30,LOW(24)
000222 e0f0      	LDI  R31,HIGH(24)
000223 15ea      	CP   R30,R10
000224 05fb      	CPC  R31,R11
000225 f411      	BRNE _0x43
                 ; 0000 00CF             h = 0;
000226 24aa      	CLR  R10
000227 24bb      	CLR  R11
                 ; 0000 00D0         }
                 ; 0000 00D1     }
                 _0x43:
                 ; 0000 00D2 
                 ; 0000 00D3     lcd_gotoxy(0,1);
                 _0x38:
000228 940e 056c 	CALL SUBOPT_0x1
                 ; 0000 00D4     sprintf(buffer, "%d%d:%d%d:%d%d" ,h/10,h%10,m/10,m%10,s/10,s%10);
00022a 940e 0571 	CALL SUBOPT_0x2
                 ; 0000 00D5     // lcd_puts(buffer);
                 ; 0000 00D6 
                 ; 0000 00D7 }
00022c 91e9      	LD   R30,Y+
00022d bfef      	OUT  SREG,R30
00022e 91f9      	LD   R31,Y+
00022f 91e9      	LD   R30,Y+
000230 91b9      	LD   R27,Y+
000231 91a9      	LD   R26,Y+
000232 9199      	LD   R25,Y+
000233 9189      	LD   R24,Y+
000234 9179      	LD   R23,Y+
000235 9169      	LD   R22,Y+
000236 90f9      	LD   R15,Y+
000237 9019      	LD   R1,Y+
000238 9009      	LD   R0,Y+
000239 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT0] void onPause (void){
                 ; 0000 00D9 interrupt [2] void onPause (void){
                 _onPause:
                 ; .FSTART _onPause
00023a 920a      	ST   -Y,R0
00023b 93ea      	ST   -Y,R30
00023c 93fa      	ST   -Y,R31
00023d b7ef      	IN   R30,SREG
00023e 93ea      	ST   -Y,R30
                 ; 0000 00DA     if (flag == 1) flag = 0;
00023f e0e1      	LDI  R30,LOW(1)
000240 e0f0      	LDI  R31,HIGH(1)
000241 15ec      	CP   R30,R12
000242 05fd      	CPC  R31,R13
000243 f419      	BRNE _0x44
000244 24cc      	CLR  R12
000245 24dd      	CLR  R13
                 ; 0000 00DB     else if (flag == 0) flag = 1;
000246 c006      	RJMP _0x45
                 _0x44:
000247 2c0c      	MOV  R0,R12
000248 280d      	OR   R0,R13
000249 f419      	BRNE _0x46
00024a e0e1      	LDI  R30,LOW(1)
00024b e0f0      	LDI  R31,HIGH(1)
00024c 016f      	MOVW R12,R30
                 ; 0000 00DC }
                 _0x46:
                 _0x45:
00024d 91e9      	LD   R30,Y+
00024e bfef      	OUT  SREG,R30
00024f 91f9      	LD   R31,Y+
000250 91e9      	LD   R30,Y+
000251 9009      	LD   R0,Y+
000252 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void onReStart (void){
                 ; 0000 00DE interrupt [3] void onReStart (void){
                 _onReStart:
                 ; .FSTART _onReStart
000253 93ea      	ST   -Y,R30
000254 b7ef      	IN   R30,SREG
                 ; 0000 00DF     s = 0;
000255 2466      	CLR  R6
000256 2477      	CLR  R7
                 ; 0000 00E0     m = 0;
000257 2488      	CLR  R8
000258 2499      	CLR  R9
                 ; 0000 00E1     h = 0;
000259 24aa      	CLR  R10
00025a 24bb      	CLR  R11
                 ; 0000 00E2 }
00025b bfef      	OUT  SREG,R30
00025c 91e9      	LD   R30,Y+
00025d 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;interrupt [EXT_INT2] void keyPressed(void){
                 ; 0000 00E5 interrupt [4] void keyPressed(void){
                 _keyPressed:
                 ; .FSTART _keyPressed
00025e 938a      	ST   -Y,R24
00025f 93aa      	ST   -Y,R26
000260 93ba      	ST   -Y,R27
000261 93ea      	ST   -Y,R30
000262 93fa      	ST   -Y,R31
000263 b7ef      	IN   R30,SREG
000264 93ea      	ST   -Y,R30
                 ; 0000 00E6 
                 ; 0000 00E7 
                 ; 0000 00E8 
                 ; 0000 00E9    // find key
                 ; 0000 00EA     int i;
                 ; 0000 00EB     unsigned char pattern;
                 ; 0000 00EC     // delay_ms(20);   debounce
                 ; 0000 00ED 
                 ; 0000 00EE     new_key = 1;
000265 940e 0665 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	pattern -> R19
000267 e0e1      	LDI  R30,LOW(1)
000268 e0f0      	LDI  R31,HIGH(1)
000269 93e0 027c 	STS  _new_key,R30
00026b 93f0 027d 	STS  _new_key+1,R31
                 ; 0000 00EF 
                 ; 0000 00F0 
                 ; 0000 00F1     DDRC |= 0xf0;                                                   // leaves portc.0 unchanged. portc.0 is connected to ...
00026d b3e4      	IN   R30,0x14
00026e 6fe0      	ORI  R30,LOW(0xF0)
00026f bbe4      	OUT  0x14,R30
                 ; 0000 00F2     DDRC &= 0xf1;                                                   // same as above
000270 b3e4      	IN   R30,0x14
000271 7fe1      	ANDI R30,LOW(0xF1)
000272 bbe4      	OUT  0x14,R30
                 ; 0000 00F3     PORTC &= 0x0f;
000273 b3e5      	IN   R30,0x15
000274 70ef      	ANDI R30,LOW(0xF)
000275 bbe5      	OUT  0x15,R30
                 ; 0000 00F4     PORTC |= 0x0e;
000276 b3e5      	IN   R30,0x15
000277 60ee      	ORI  R30,LOW(0xE)
000278 bbe5      	OUT  0x15,R30
                 ; 0000 00F5     delay_us(5);
                +
000279 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00027a 958a     +DEC R24
00027b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
                 ; 0000 00F6     pattern = (PINC & 0b00001111);
00027c b3e3      	IN   R30,0x13
00027d 70ef      	ANDI R30,LOW(0xF)
00027e 2f3e      	MOV  R19,R30
                 ; 0000 00F7     DDRC |= 0x0e;
00027f b3e4      	IN   R30,0x14
000280 60ee      	ORI  R30,LOW(0xE)
000281 bbe4      	OUT  0x14,R30
                 ; 0000 00F8     DDRC &= 0x0f;
000282 b3e4      	IN   R30,0x14
000283 70ef      	ANDI R30,LOW(0xF)
000284 bbe4      	OUT  0x14,R30
                 ; 0000 00F9     PORTC |= 0xf0;
000285 b3e5      	IN   R30,0x15
000286 6fe0      	ORI  R30,LOW(0xF0)
000287 bbe5      	OUT  0x15,R30
                 ; 0000 00FA     PORTC &= 0xf1;
000288 b3e5      	IN   R30,0x15
000289 7fe1      	ANDI R30,LOW(0xF1)
00028a bbe5      	OUT  0x15,R30
                 ; 0000 00FB     delay_us(5);
                +
00028b e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00028c 958a     +DEC R24
00028d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
                 ; 0000 00FC     pattern |= (PINC & 0b11110000) | 0x01;                          // lsb is not connected to keypad, always gets the v ...
00028e b3e3      	IN   R30,0x13
00028f 7fe0      	ANDI R30,LOW(0xF0)
000290 60e1      	ORI  R30,1
000291 2b3e      	OR   R19,R30
                 ; 0000 00FD     for(i = 0 ; i < 12 ; i++){
                +
000292 e000     +LDI R16 , LOW ( 0 )
000293 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x48:
                +
000294 300c     +CPI R16 , LOW ( 12 )
000295 e0e0     +LDI R30 , HIGH ( 12 )
000296 071e     +CPC R17 , R30
                 	__CPWRN 16,17,12
000297 f47c      	BRGE _0x49
                 ; 0000 00FE         if(keypadPatterns[i] == pattern){
000298 e7a0      	LDI  R26,LOW(_keypadPatterns)
000299 e0b2      	LDI  R27,HIGH(_keypadPatterns)
00029a 0fa0      	ADD  R26,R16
00029b 1fb1      	ADC  R27,R17
00029c 91ac      	LD   R26,X
00029d 173a      	CP   R19,R26
00029e f429      	BRNE _0x4A
                 ; 0000 00FF             pressed_key = i;
                +
00029f 9300 027e+STS _pressed_key + ( 0 ) , R16
0002a1 9310 027f+STS _pressed_key + ( 0 ) + 1 , R17
                 	__PUTWMRN _pressed_key,0,16,17
                 ; 0000 0100             break;
0002a3 c003      	RJMP _0x49
                 ; 0000 0101             }
                 ; 0000 0102 
                 ; 0000 0103     }
                 _0x4A:
                +
0002a4 5f0f     +SUBI R16 , LOW ( - 1 )
0002a5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002a6 cfed      	RJMP _0x48
                 _0x49:
                 ; 0000 0104 
                 ; 0000 0105 
                 ; 0000 0106 
                 ; 0000 0107 
                 ; 0000 0108 
                 ; 0000 0109 }
0002a7 940e 066c 	CALL __LOADLOCR4
0002a9 9624      	ADIW R28,4
0002aa 91e9      	LD   R30,Y+
0002ab bfef      	OUT  SREG,R30
0002ac 91f9      	LD   R31,Y+
0002ad 91e9      	LD   R30,Y+
0002ae 91b9      	LD   R27,Y+
0002af 91a9      	LD   R26,Y+
0002b0 9189      	LD   R24,Y+
0002b1 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void EEPROM_write(unsigned char uiAddress, unsigned char ucData){    // address is in 0-255 range
                 ; 0000 010C void EEPROM_write(unsigned char uiAddress, unsigned char ucData){
                 _EEPROM_write:
                 ; .FSTART _EEPROM_write
                 ; 0000 010D     /* Wait for completion of previous write */
                 ; 0000 010E     while(EECR & (1<<EEWE));
0002b2 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+1
                 ;	ucData -> Y+0
                 _0x4B:
0002b3 99e1      	SBIC 0x1C,1
0002b4 cffe      	RJMP _0x4B
                 ; 0000 010F     /* Set up address and data registers */
                 ; 0000 0110     EEARH = 0;
0002b5 e0e0      	LDI  R30,LOW(0)
0002b6 bbef      	OUT  0x1F,R30
                 ; 0000 0111     EEARL = uiAddress;
0002b7 81e9      	LDD  R30,Y+1
0002b8 bbee      	OUT  0x1E,R30
                 ; 0000 0112 
                 ; 0000 0113     EEDR = ucData;
0002b9 81e8      	LD   R30,Y
0002ba bbed      	OUT  0x1D,R30
                 ; 0000 0114     /* Write logical one to EEMWE */
                 ; 0000 0115     EECR |= (1<<EEMWE);
0002bb 9ae2      	SBI  0x1C,2
                 ; 0000 0116     /* Start eeprom write by setting EEWE */
                 ; 0000 0117     EECR |= (1<<EEWE);
0002bc 9ae1      	SBI  0x1C,1
                 ; 0000 0118 }
0002bd c039      	RJMP _0x20C0004
                 ; .FEND
                 ;
                 ;
                 ;unsigned char EEPROM_read(unsigned char uiAddress){     // address is in 0-255 range
                 ; 0000 011B unsigned char EEPROM_read(unsigned char uiAddress){
                 _EEPROM_read:
                 ; .FSTART _EEPROM_read
                 ; 0000 011C     /* Wait for completion of previous write */
                 ; 0000 011D     while(EECR & (1<<EEWE));
0002be 93aa      	ST   -Y,R26
                 ;	uiAddress -> Y+0
                 _0x4E:
0002bf 99e1      	SBIC 0x1C,1
0002c0 cffe      	RJMP _0x4E
                 ; 0000 011E     /* Set up address register */
                 ; 0000 011F     EEARH = 0;
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 bbef      	OUT  0x1F,R30
                 ; 0000 0120     EEARL = uiAddress;
0002c3 81e8      	LD   R30,Y
0002c4 bbee      	OUT  0x1E,R30
                 ; 0000 0121     /* Start eeprom read by writing EERE */
                 ; 0000 0122     EECR |= (1<<EERE);
0002c5 9ae0      	SBI  0x1C,0
                 ; 0000 0123     /* Return data from data register */
                 ; 0000 0124     return EEDR;
0002c6 b3ed      	IN   R30,0x1D
0002c7 c0ad      	RJMP _0x20C0002
                 ; 0000 0125 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0002c8 93aa      	ST   -Y,R26
0002c9 b3eb      	IN   R30,0x1B
0002ca 70ef      	ANDI R30,LOW(0xF)
0002cb 2fae      	MOV  R26,R30
0002cc 81e8      	LD   R30,Y
0002cd 7fe0      	ANDI R30,LOW(0xF0)
0002ce 2bea      	OR   R30,R26
0002cf bbeb      	OUT  0x1B,R30
                +
0002d0 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002d1 958a     +DEC R24
0002d2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002d3 9ada      	SBI  0x1B,2
                +
0002d4 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002d5 958a     +DEC R24
0002d6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002d7 98da      	CBI  0x1B,2
                +
0002d8 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002d9 958a     +DEC R24
0002da f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002db c099      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002dc 93aa      	ST   -Y,R26
0002dd 81a8      	LD   R26,Y
0002de dfe9      	RCALL __lcd_write_nibble_G100
0002df 81e8          ld    r30,y
0002e0 95e2          swap  r30
0002e1 83e8          st    y,r30
0002e2 81a8      	LD   R26,Y
0002e3 dfe4      	RCALL __lcd_write_nibble_G100
                +
0002e4 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0002e5 958a     +DEC R24
0002e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0002e7 c08d      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002e8 93aa      	ST   -Y,R26
0002e9 81e8      	LD   R30,Y
0002ea e0f0      	LDI  R31,0
0002eb 58e0      	SUBI R30,LOW(-__base_y_G100)
0002ec 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0002ed 81e0      	LD   R30,Z
0002ee 81a9      	LDD  R26,Y+1
0002ef 0fae      	ADD  R26,R30
0002f0 dfeb      	RCALL __lcd_write_data
0002f1 81e9      	LDD  R30,Y+1
0002f2 93e0 0284 	STS  __lcd_x,R30
0002f4 81e8      	LD   R30,Y
0002f5 93e0 0285 	STS  __lcd_y,R30
                 _0x20C0004:
0002f7 9622      	ADIW R28,2
0002f8 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002f9 e0a2      	LDI  R26,LOW(2)
0002fa 940e 05d2 	CALL SUBOPT_0x7
0002fc e0ac      	LDI  R26,LOW(12)
0002fd dfde      	RCALL __lcd_write_data
0002fe e0a1      	LDI  R26,LOW(1)
0002ff 940e 05d2 	CALL SUBOPT_0x7
000301 e0e0      	LDI  R30,LOW(0)
000302 93e0 0285 	STS  __lcd_y,R30
000304 93e0 0284 	STS  __lcd_x,R30
000306 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000307 93aa      	ST   -Y,R26
000308 81a8      	LD   R26,Y
000309 30aa      	CPI  R26,LOW(0xA)
00030a f031      	BREQ _0x2000005
00030b 91e0 0286 	LDS  R30,__lcd_maxx
00030d 91a0 0284 	LDS  R26,__lcd_x
00030f 17ae      	CP   R26,R30
000310 f060      	BRLO _0x2000004
                 _0x2000005:
000311 e0e0      	LDI  R30,LOW(0)
000312 93ea      	ST   -Y,R30
000313 91a0 0285 	LDS  R26,__lcd_y
000315 5faf      	SUBI R26,-LOW(1)
000316 93a0 0285 	STS  __lcd_y,R26
000318 dfcf      	RCALL _lcd_gotoxy
000319 81a8      	LD   R26,Y
00031a 30aa      	CPI  R26,LOW(0xA)
00031b f409      	BRNE _0x2000007
00031c c058      	RJMP _0x20C0002
                 _0x2000007:
                 _0x2000004:
00031d 91e0 0284 	LDS  R30,__lcd_x
00031f 5fef      	SUBI R30,-LOW(1)
000320 93e0 0284 	STS  __lcd_x,R30
000322 9ad8      	SBI  0x1B,0
000323 81a8      	LD   R26,Y
000324 dfb7      	RCALL __lcd_write_data
000325 98d8      	CBI  0x1B,0
000326 c04e      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000327 93ba      	ST   -Y,R27
000328 93aa      	ST   -Y,R26
000329 931a      	ST   -Y,R17
                 _0x2000008:
00032a 81a9      	LDD  R26,Y+1
00032b 81ba      	LDD  R27,Y+1+1
00032c 91ed      	LD   R30,X+
00032d 83a9      	STD  Y+1,R26
00032e 83ba      	STD  Y+1+1,R27
00032f 2f1e      	MOV  R17,R30
000330 30e0      	CPI  R30,0
000331 f019      	BREQ _0x200000A
000332 2fa1      	MOV  R26,R17
000333 dfd3      	RCALL _lcd_putchar
000334 cff5      	RJMP _0x2000008
                 _0x200000A:
000335 c010      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000336 93ba      	ST   -Y,R27
000337 93aa      	ST   -Y,R26
000338 931a      	ST   -Y,R17
                 _0x200000B:
000339 81e9      	LDD  R30,Y+1
00033a 81fa      	LDD  R31,Y+1+1
00033b 9631      	ADIW R30,1
00033c 83e9      	STD  Y+1,R30
00033d 83fa      	STD  Y+1+1,R31
00033e 9731      	SBIW R30,1
00033f 91e4      	LPM  R30,Z
000340 2f1e      	MOV  R17,R30
000341 30e0      	CPI  R30,0
000342 f019      	BREQ _0x200000D
000343 2fa1      	MOV  R26,R17
000344 dfc2      	RCALL _lcd_putchar
000345 cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x20C0003:
000346 8118      	LDD  R17,Y+0
000347 9623      	ADIW R28,3
000348 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000349 93aa      	ST   -Y,R26
00034a b3ea      	IN   R30,0x1A
00034b 6fe0      	ORI  R30,LOW(0xF0)
00034c bbea      	OUT  0x1A,R30
00034d 9ad2      	SBI  0x1A,2
00034e 9ad0      	SBI  0x1A,0
00034f 9ad1      	SBI  0x1A,1
000350 98da      	CBI  0x1B,2
000351 98d8      	CBI  0x1B,0
000352 98d9      	CBI  0x1B,1
000353 81e8      	LD   R30,Y
000354 93e0 0286 	STS  __lcd_maxx,R30
000356 58e0      	SUBI R30,-LOW(128)
                +
000357 93e0 0282+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000359 81e8      	LD   R30,Y
00035a 54e0      	SUBI R30,-LOW(192)
                +
00035b 93e0 0283+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00035d e1a4      	LDI  R26,LOW(20)
00035e e0b0      	LDI  R27,0
00035f 940e 060b 	CALL _delay_ms
000361 940e 05d8 	CALL SUBOPT_0x8
000363 940e 05d8 	CALL SUBOPT_0x8
000365 940e 05d8 	CALL SUBOPT_0x8
000367 e2a0      	LDI  R26,LOW(32)
000368 df5f      	RCALL __lcd_write_nibble_G100
                +
000369 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00036a 958a     +DEC R24
00036b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00036c e2a8      	LDI  R26,LOW(40)
00036d df6e      	RCALL __lcd_write_data
00036e e0a4      	LDI  R26,LOW(4)
00036f df6c      	RCALL __lcd_write_data
000370 e8a5      	LDI  R26,LOW(133)
000371 df6a      	RCALL __lcd_write_data
000372 e0a6      	LDI  R26,LOW(6)
000373 df68      	RCALL __lcd_write_data
000374 df84      	RCALL _lcd_clear
                 _0x20C0002:
000375 9621      	ADIW R28,1
000376 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000377 93ba      	ST   -Y,R27
000378 93aa      	ST   -Y,R26
000379 91a9          ld   r26,y+
00037a 91b9          ld   r27,y+
00037b 91e9          ld   r30,y+
00037c 91f9          ld   r31,y+
00037d 9630          adiw r30,0
00037e f42a          brpl __itoa0
00037f 95e0          com  r30
000380 95f0          com  r31
000381 9631          adiw r30,1
000382 e26d          ldi  r22,'-'
000383 936d          st   x+,r22
                 __itoa0:
000384 94e8          clt
000385 e180          ldi  r24,low(10000)
000386 e297          ldi  r25,high(10000)
000387 d00d          rcall __itoa1
000388 ee88          ldi  r24,low(1000)
000389 e093          ldi  r25,high(1000)
00038a d00a          rcall __itoa1
00038b e684          ldi  r24,100
00038c 2799          clr  r25
00038d d007          rcall __itoa1
00038e e08a          ldi  r24,10
00038f d005          rcall __itoa1
000390 2f6e          mov  r22,r30
000391 d010          rcall __itoa5
000392 2766          clr  r22
000393 936c          st   x,r22
000394 9508          ret
                 
                 __itoa1:
000395 2766          clr	 r22
                 __itoa2:
000396 17e8          cp   r30,r24
000397 07f9          cpc  r31,r25
000398 f020          brlo __itoa3
000399 9563          inc  r22
00039a 1be8          sub  r30,r24
00039b 0bf9          sbc  r31,r25
00039c f7c9          brne __itoa2
                 __itoa3:
00039d 2366          tst  r22
00039e f411          brne __itoa4
00039f f016          brts __itoa5
0003a0 9508          ret
                 __itoa4:
0003a1 9468          set
                 __itoa5:
0003a2 5d60          subi r22,-0x30
0003a3 936d          st   x+,r22
0003a4 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0003a5 93ba      	ST   -Y,R27
0003a6 93aa      	ST   -Y,R26
0003a7 931a      	ST   -Y,R17
0003a8 930a      	ST   -Y,R16
0003a9 81aa      	LDD  R26,Y+2
0003aa 81bb      	LDD  R27,Y+2+1
0003ab 9612      	ADIW R26,2
0003ac 940e 0656 	CALL __GETW1P
0003ae 9730      	SBIW R30,0
0003af f159      	BREQ _0x2040010
0003b0 81aa      	LDD  R26,Y+2
0003b1 81bb      	LDD  R27,Y+2+1
0003b2 9614      	ADIW R26,4
0003b3 940e 0656 	CALL __GETW1P
0003b5 018f      	MOVW R16,R30
0003b6 9730      	SBIW R30,0
0003b7 f061      	BREQ _0x2040012
                +
0003b8 3002     +CPI R16 , LOW ( 2 )
0003b9 e0e0     +LDI R30 , HIGH ( 2 )
0003ba 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003bb f098      	BRLO _0x2040013
0003bc 01f8      	MOVW R30,R16
0003bd 9731      	SBIW R30,1
0003be 018f      	MOVW R16,R30
                +
0003bf 81aa     +LDD R26 , Y + 2
0003c0 81bb     +LDD R27 , Y + 2 + 1
0003c1 9614     +ADIW R26 , 4
0003c2 93ed     +ST X + , R30
0003c3 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0003c4 81aa      	LDD  R26,Y+2
0003c5 81bb      	LDD  R27,Y+2+1
0003c6 9612      	ADIW R26,2
0003c7 91ed      	LD   R30,X+
0003c8 91fd      	LD   R31,X+
0003c9 9631      	ADIW R30,1
0003ca 93fe      	ST   -X,R31
0003cb 93ee      	ST   -X,R30
0003cc 9731      	SBIW R30,1
0003cd 81ac      	LDD  R26,Y+4
0003ce 83a0      	STD  Z+0,R26
                 _0x2040013:
0003cf 81aa      	LDD  R26,Y+2
0003d0 81bb      	LDD  R27,Y+2+1
0003d1 940e 0656 	CALL __GETW1P
0003d3 23ff      	TST  R31
0003d4 f02a      	BRMI _0x2040014
0003d5 91ed      	LD   R30,X+
0003d6 91fd      	LD   R31,X+
0003d7 9631      	ADIW R30,1
0003d8 93fe      	ST   -X,R31
0003d9 93ee      	ST   -X,R30
                 _0x2040014:
0003da c006      	RJMP _0x2040015
                 _0x2040010:
0003db 81aa      	LDD  R26,Y+2
0003dc 81bb      	LDD  R27,Y+2+1
0003dd efef      	LDI  R30,LOW(65535)
0003de efff      	LDI  R31,HIGH(65535)
0003df 93ed      	ST   X+,R30
0003e0 93fc      	ST   X,R31
                 _0x2040015:
0003e1 8119      	LDD  R17,Y+1
0003e2 8108      	LDD  R16,Y+0
0003e3 9625      	ADIW R28,5
0003e4 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
0003e5 93ba      	ST   -Y,R27
0003e6 93aa      	ST   -Y,R26
0003e7 9726      	SBIW R28,6
0003e8 940e 0663 	CALL __SAVELOCR6
0003ea e010      	LDI  R17,0
0003eb 85ac      	LDD  R26,Y+12
0003ec 85bd      	LDD  R27,Y+12+1
0003ed e0e0      	LDI  R30,LOW(0)
0003ee e0f0      	LDI  R31,HIGH(0)
0003ef 93ed      	ST   X+,R30
0003f0 93fc      	ST   X,R31
                 _0x2040016:
0003f1 89ea      	LDD  R30,Y+18
0003f2 89fb      	LDD  R31,Y+18+1
0003f3 9631      	ADIW R30,1
0003f4 8bea      	STD  Y+18,R30
0003f5 8bfb      	STD  Y+18+1,R31
0003f6 9731      	SBIW R30,1
0003f7 91e4      	LPM  R30,Z
0003f8 2f2e      	MOV  R18,R30
0003f9 30e0      	CPI  R30,0
0003fa f409      	BRNE PC+2
0003fb c115      	RJMP _0x2040018
0003fc 2fe1      	MOV  R30,R17
0003fd 30e0      	CPI  R30,0
0003fe f439      	BRNE _0x204001C
0003ff 3225      	CPI  R18,37
000400 f411      	BRNE _0x204001D
000401 e011      	LDI  R17,LOW(1)
000402 c002      	RJMP _0x204001E
                 _0x204001D:
000403 940e 05df 	CALL SUBOPT_0x9
                 _0x204001E:
000405 c10a      	RJMP _0x204001B
                 _0x204001C:
000406 30e1      	CPI  R30,LOW(0x1)
000407 f4a9      	BRNE _0x204001F
000408 3225      	CPI  R18,37
000409 f419      	BRNE _0x2040020
00040a 940e 05df 	CALL SUBOPT_0x9
00040c c102      	RJMP _0x20400CC
                 _0x2040020:
00040d e012      	LDI  R17,LOW(2)
00040e e040      	LDI  R20,LOW(0)
00040f e000      	LDI  R16,LOW(0)
000410 322d      	CPI  R18,45
000411 f411      	BRNE _0x2040021
000412 e001      	LDI  R16,LOW(1)
000413 c0fc      	RJMP _0x204001B
                 _0x2040021:
000414 322b      	CPI  R18,43
000415 f411      	BRNE _0x2040022
000416 e24b      	LDI  R20,LOW(43)
000417 c0f8      	RJMP _0x204001B
                 _0x2040022:
000418 3220      	CPI  R18,32
000419 f411      	BRNE _0x2040023
00041a e240      	LDI  R20,LOW(32)
00041b c0f4      	RJMP _0x204001B
                 _0x2040023:
00041c c002      	RJMP _0x2040024
                 _0x204001F:
00041d 30e2      	CPI  R30,LOW(0x2)
00041e f439      	BRNE _0x2040025
                 _0x2040024:
00041f e050      	LDI  R21,LOW(0)
000420 e013      	LDI  R17,LOW(3)
000421 3320      	CPI  R18,48
000422 f411      	BRNE _0x2040026
000423 6800      	ORI  R16,LOW(128)
000424 c0eb      	RJMP _0x204001B
                 _0x2040026:
000425 c003      	RJMP _0x2040027
                 _0x2040025:
000426 30e3      	CPI  R30,LOW(0x3)
000427 f009      	BREQ PC+2
000428 c0e7      	RJMP _0x204001B
                 _0x2040027:
000429 3320      	CPI  R18,48
00042a f010      	BRLO _0x204002A
00042b 332a      	CPI  R18,58
00042c f008      	BRLO _0x204002B
                 _0x204002A:
00042d c007      	RJMP _0x2040029
                 _0x204002B:
00042e e0aa      	LDI  R26,LOW(10)
00042f 9f5a      	MUL  R21,R26
000430 2d50      	MOV  R21,R0
000431 2fe2      	MOV  R30,R18
000432 53e0      	SUBI R30,LOW(48)
000433 0f5e      	ADD  R21,R30
000434 c0db      	RJMP _0x204001B
                 _0x2040029:
000435 2fe2      	MOV  R30,R18
000436 36e3      	CPI  R30,LOW(0x63)
000437 f449      	BRNE _0x204002F
000438 940e 05e6 	CALL SUBOPT_0xA
00043a 89e8      	LDD  R30,Y+16
00043b 89f9      	LDD  R31,Y+16+1
00043c 81a4      	LDD  R26,Z+4
00043d 93aa      	ST   -Y,R26
00043e 940e 05ec 	CALL SUBOPT_0xB
000440 c0ce      	RJMP _0x2040030
                 _0x204002F:
000441 37e3      	CPI  R30,LOW(0x73)
000442 f441      	BRNE _0x2040032
000443 940e 05e6 	CALL SUBOPT_0xA
000445 940e 05f2 	CALL SUBOPT_0xC
000447 940e 054d 	CALL _strlen
000449 2f1e      	MOV  R17,R30
00044a c00a      	RJMP _0x2040033
                 _0x2040032:
00044b 37e0      	CPI  R30,LOW(0x70)
00044c f461      	BRNE _0x2040035
00044d 940e 05e6 	CALL SUBOPT_0xA
00044f 940e 05f2 	CALL SUBOPT_0xC
000451 940e 0559 	CALL _strlenf
000453 2f1e      	MOV  R17,R30
000454 6008      	ORI  R16,LOW(8)
                 _0x2040033:
000455 6002      	ORI  R16,LOW(2)
000456 770f      	ANDI R16,LOW(127)
000457 e030      	LDI  R19,LOW(0)
000458 c034      	RJMP _0x2040036
                 _0x2040035:
000459 36e4      	CPI  R30,LOW(0x64)
00045a f011      	BREQ _0x2040039
00045b 36e9      	CPI  R30,LOW(0x69)
00045c f411      	BRNE _0x204003A
                 _0x2040039:
00045d 6004      	ORI  R16,LOW(4)
00045e c002      	RJMP _0x204003B
                 _0x204003A:
00045f 37e5      	CPI  R30,LOW(0x75)
000460 f431      	BRNE _0x204003C
                 _0x204003B:
000461 e5e4      	LDI  R30,LOW(_tbl10_G102*2)
000462 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
000463 83ee      	STD  Y+6,R30
000464 83ff      	STD  Y+6+1,R31
000465 e015      	LDI  R17,LOW(5)
000466 c00c      	RJMP _0x204003D
                 _0x204003C:
000467 35e8      	CPI  R30,LOW(0x58)
000468 f411      	BRNE _0x204003F
000469 6008      	ORI  R16,LOW(8)
00046a c003      	RJMP _0x2040040
                 _0x204003F:
00046b 37e8      	CPI  R30,LOW(0x78)
00046c f009      	BREQ PC+2
00046d c0a1      	RJMP _0x2040071
                 _0x2040040:
00046e e5ee      	LDI  R30,LOW(_tbl16_G102*2)
00046f e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
000470 83ee      	STD  Y+6,R30
000471 83ff      	STD  Y+6+1,R31
000472 e014      	LDI  R17,LOW(4)
                 _0x204003D:
000473 ff02      	SBRS R16,2
000474 c014      	RJMP _0x2040042
000475 940e 05e6 	CALL SUBOPT_0xA
000477 940e 05fc 	CALL SUBOPT_0xD
000479 85ab      	LDD  R26,Y+11
00047a 23aa      	TST  R26
00047b f43a      	BRPL _0x2040043
00047c 85ea      	LDD  R30,Y+10
00047d 85fb      	LDD  R31,Y+10+1
00047e 940e 0619 	CALL __ANEGW1
000480 87ea      	STD  Y+10,R30
000481 87fb      	STD  Y+10+1,R31
000482 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
000483 3040      	CPI  R20,0
000484 f011      	BREQ _0x2040044
000485 5f1f      	SUBI R17,-LOW(1)
000486 c001      	RJMP _0x2040045
                 _0x2040044:
000487 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000488 c004      	RJMP _0x2040046
                 _0x2040042:
000489 940e 05e6 	CALL SUBOPT_0xA
00048b 940e 05fc 	CALL SUBOPT_0xD
                 _0x2040046:
                 _0x2040036:
00048d fd00      	SBRC R16,0
00048e c011      	RJMP _0x2040047
                 _0x2040048:
00048f 1715      	CP   R17,R21
000490 f478      	BRSH _0x204004A
000491 ff07      	SBRS R16,7
000492 c008      	RJMP _0x204004B
000493 ff02      	SBRS R16,2
000494 c004      	RJMP _0x204004C
000495 7f0b      	ANDI R16,LOW(251)
000496 2f24      	MOV  R18,R20
000497 5011      	SUBI R17,LOW(1)
000498 c001      	RJMP _0x204004D
                 _0x204004C:
000499 e320      	LDI  R18,LOW(48)
                 _0x204004D:
00049a c001      	RJMP _0x204004E
                 _0x204004B:
00049b e220      	LDI  R18,LOW(32)
                 _0x204004E:
00049c 940e 05df 	CALL SUBOPT_0x9
00049e 5051      	SUBI R21,LOW(1)
00049f cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0004a0 2f31      	MOV  R19,R17
0004a1 ff01      	SBRS R16,1
0004a2 c017      	RJMP _0x204004F
                 _0x2040050:
0004a3 3030      	CPI  R19,0
0004a4 f0a1      	BREQ _0x2040052
0004a5 ff03      	SBRS R16,3
0004a6 c006      	RJMP _0x2040053
0004a7 81ee      	LDD  R30,Y+6
0004a8 81ff      	LDD  R31,Y+6+1
0004a9 9125      	LPM  R18,Z+
0004aa 83ee      	STD  Y+6,R30
0004ab 83ff      	STD  Y+6+1,R31
0004ac c005      	RJMP _0x2040054
                 _0x2040053:
0004ad 81ae      	LDD  R26,Y+6
0004ae 81bf      	LDD  R27,Y+6+1
0004af 912d      	LD   R18,X+
0004b0 83ae      	STD  Y+6,R26
0004b1 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0004b2 940e 05df 	CALL SUBOPT_0x9
0004b4 3050      	CPI  R21,0
0004b5 f009      	BREQ _0x2040055
0004b6 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0004b7 5031      	SUBI R19,LOW(1)
0004b8 cfea      	RJMP _0x2040050
                 _0x2040052:
0004b9 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0004ba e320      	LDI  R18,LOW(48)
0004bb 81ee      	LDD  R30,Y+6
0004bc 81ff      	LDD  R31,Y+6+1
0004bd 940e 065a 	CALL __GETW1PF
0004bf 87e8      	STD  Y+8,R30
0004c0 87f9      	STD  Y+8+1,R31
0004c1 81ee      	LDD  R30,Y+6
0004c2 81ff      	LDD  R31,Y+6+1
0004c3 9632      	ADIW R30,2
0004c4 83ee      	STD  Y+6,R30
0004c5 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0004c6 85e8      	LDD  R30,Y+8
0004c7 85f9      	LDD  R31,Y+8+1
0004c8 85aa      	LDD  R26,Y+10
0004c9 85bb      	LDD  R27,Y+10+1
0004ca 17ae      	CP   R26,R30
0004cb 07bf      	CPC  R27,R31
0004cc f050      	BRLO _0x204005C
0004cd 5f2f      	SUBI R18,-LOW(1)
0004ce 85a8      	LDD  R26,Y+8
0004cf 85b9      	LDD  R27,Y+8+1
0004d0 85ea      	LDD  R30,Y+10
0004d1 85fb      	LDD  R31,Y+10+1
0004d2 1bea      	SUB  R30,R26
0004d3 0bfb      	SBC  R31,R27
0004d4 87ea      	STD  Y+10,R30
0004d5 87fb      	STD  Y+10+1,R31
0004d6 cfef      	RJMP _0x204005A
                 _0x204005C:
0004d7 332a      	CPI  R18,58
0004d8 f028      	BRLO _0x204005D
0004d9 ff03      	SBRS R16,3
0004da c002      	RJMP _0x204005E
0004db 5f29      	SUBI R18,-LOW(7)
0004dc c001      	RJMP _0x204005F
                 _0x204005E:
0004dd 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
0004de fd04      	SBRC R16,4
0004df c01a      	RJMP _0x2040061
0004e0 3321      	CPI  R18,49
0004e1 f420      	BRSH _0x2040063
0004e2 85a8      	LDD  R26,Y+8
0004e3 85b9      	LDD  R27,Y+8+1
0004e4 9711      	SBIW R26,1
0004e5 f409      	BRNE _0x2040062
                 _0x2040063:
0004e6 c009      	RJMP _0x20400CD
                 _0x2040062:
0004e7 1753      	CP   R21,R19
0004e8 f010      	BRLO _0x2040067
0004e9 ff00      	SBRS R16,0
0004ea c001      	RJMP _0x2040068
                 _0x2040067:
0004eb c013      	RJMP _0x2040066
                 _0x2040068:
0004ec e220      	LDI  R18,LOW(32)
0004ed ff07      	SBRS R16,7
0004ee c00b      	RJMP _0x2040069
0004ef e320      	LDI  R18,LOW(48)
                 _0x20400CD:
0004f0 6100      	ORI  R16,LOW(16)
0004f1 ff02      	SBRS R16,2
0004f2 c007      	RJMP _0x204006A
0004f3 7f0b      	ANDI R16,LOW(251)
0004f4 934a      	ST   -Y,R20
0004f5 940e 05ec 	CALL SUBOPT_0xB
0004f7 3050      	CPI  R21,0
0004f8 f009      	BREQ _0x204006B
0004f9 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
0004fa 940e 05df 	CALL SUBOPT_0x9
0004fc 3050      	CPI  R21,0
0004fd f009      	BREQ _0x204006C
0004fe 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
0004ff 5031      	SUBI R19,LOW(1)
000500 85a8      	LDD  R26,Y+8
000501 85b9      	LDD  R27,Y+8+1
000502 9712      	SBIW R26,2
000503 f008      	BRLO _0x2040059
000504 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000505 ff00      	SBRS R16,0
000506 c008      	RJMP _0x204006D
                 _0x204006E:
000507 3050      	CPI  R21,0
000508 f031      	BREQ _0x2040070
000509 5051      	SUBI R21,LOW(1)
00050a e2e0      	LDI  R30,LOW(32)
00050b 93ea      	ST   -Y,R30
00050c 940e 05ec 	CALL SUBOPT_0xB
00050e cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
00050f e010      	LDI  R17,LOW(0)
                 _0x204001B:
000510 cee0      	RJMP _0x2040016
                 _0x2040018:
000511 85ac      	LDD  R26,Y+12
000512 85bd      	LDD  R27,Y+12+1
000513 940e 0656 	CALL __GETW1P
000515 940e 066a 	CALL __LOADLOCR6
000517 9664      	ADIW R28,20
000518 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000519 92ff      	PUSH R15
00051a 2ef8      	MOV  R15,R24
00051b 9726      	SBIW R28,6
00051c 940e 0665 	CALL __SAVELOCR4
00051e 940e 0604 	CALL SUBOPT_0xE
000520 9730      	SBIW R30,0
000521 f419      	BRNE _0x2040072
000522 efef      	LDI  R30,LOW(65535)
000523 efff      	LDI  R31,HIGH(65535)
000524 c023      	RJMP _0x20C0001
                 _0x2040072:
000525 01de      	MOVW R26,R28
000526 9616      	ADIW R26,6
000527 940e 0615 	CALL __ADDW2R15
000529 018d      	MOVW R16,R26
00052a 940e 0604 	CALL SUBOPT_0xE
00052c 83ee      	STD  Y+6,R30
00052d 83ff      	STD  Y+6+1,R31
00052e e0e0      	LDI  R30,LOW(0)
00052f 87e8      	STD  Y+8,R30
000530 87e9      	STD  Y+8+1,R30
000531 01de      	MOVW R26,R28
000532 961a      	ADIW R26,10
000533 940e 0615 	CALL __ADDW2R15
000535 940e 0656 	CALL __GETW1P
000537 93fa      	ST   -Y,R31
000538 93ea      	ST   -Y,R30
000539 931a      	ST   -Y,R17
00053a 930a      	ST   -Y,R16
00053b eae5      	LDI  R30,LOW(_put_buff_G102)
00053c e0f3      	LDI  R31,HIGH(_put_buff_G102)
00053d 93fa      	ST   -Y,R31
00053e 93ea      	ST   -Y,R30
00053f 01de      	MOVW R26,R28
000540 961a      	ADIW R26,10
000541 dea3      	RCALL __print_G102
000542 019f      	MOVW R18,R30
000543 81ae      	LDD  R26,Y+6
000544 81bf      	LDD  R27,Y+6+1
000545 e0e0      	LDI  R30,LOW(0)
000546 93ec      	ST   X,R30
000547 01f9      	MOVW R30,R18
                 _0x20C0001:
000548 940e 066c 	CALL __LOADLOCR4
00054a 962a      	ADIW R28,10
00054b 90ff      	POP  R15
00054c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00054d 93ba      	ST   -Y,R27
00054e 93aa      	ST   -Y,R26
00054f 91a9          ld   r26,y+
000550 91b9          ld   r27,y+
000551 27ee          clr  r30
000552 27ff          clr  r31
                 strlen0:
000553 916d          ld   r22,x+
000554 2366          tst  r22
000555 f011          breq strlen1
000556 9631          adiw r30,1
000557 cffb          rjmp strlen0
                 strlen1:
000558 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000559 93ba      	ST   -Y,R27
00055a 93aa      	ST   -Y,R26
00055b 27aa          clr  r26
00055c 27bb          clr  r27
00055d 91e9          ld   r30,y+
00055e 91f9          ld   r31,y+
                 strlenf0:
00055f 9005      	lpm  r0,z+
000560 2000          tst  r0
000561 f011          breq strlenf1
000562 9611          adiw r26,1
000563 cffb          rjmp strlenf0
                 strlenf1:
000564 01fd          movw r30,r26
000565 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
000260           	.BYTE 0x10
                 _keypadPatterns:
000270           	.BYTE 0xC
                 _new_key:
00027c           	.BYTE 0x2
                 _pressed_key:
00027e           	.BYTE 0x2
                 __base_y_G100:
000280           	.BYTE 0x4
                 __lcd_x:
000284           	.BYTE 0x1
                 __lcd_y:
000285           	.BYTE 0x1
                 __lcd_maxx:
000286           	.BYTE 0x1
                 __seed_G101:
000287           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
000566 2fe1      	MOV  R30,R17
000567 01d9      	MOVW R26,R18
000568 e0f0      	LDI  R31,0
000569 17ae      	CP   R26,R30
00056a 07bf      	CPC  R27,R31
00056b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00056c e0e0      	LDI  R30,LOW(0)
00056d 93ea      	ST   -Y,R30
00056e e0a1      	LDI  R26,LOW(1)
00056f 940c 02e8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:61 WORDS
                 SUBOPT_0x2:
000571 e6e0      	LDI  R30,LOW(_buffer)
000572 e0f2      	LDI  R31,HIGH(_buffer)
000573 93fa      	ST   -Y,R31
000574 93ea      	ST   -Y,R30
                +
000575 e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000576 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000577 93fa      	ST   -Y,R31
000578 93ea      	ST   -Y,R30
000579 01d5      	MOVW R26,R10
00057a e0ea      	LDI  R30,LOW(10)
00057b e0f0      	LDI  R31,HIGH(10)
00057c 940e 0635 	CALL __DIVW21
00057e 940e 061d 	CALL __CWD1
000580 940e 065e 	CALL __PUTPARD1
000582 01d5      	MOVW R26,R10
000583 e0ea      	LDI  R30,LOW(10)
000584 e0f0      	LDI  R31,HIGH(10)
000585 940e 063a 	CALL __MODW21
000587 940e 061d 	CALL __CWD1
000589 940e 065e 	CALL __PUTPARD1
00058b 01d4      	MOVW R26,R8
00058c e0ea      	LDI  R30,LOW(10)
00058d e0f0      	LDI  R31,HIGH(10)
00058e 940e 0635 	CALL __DIVW21
000590 940e 061d 	CALL __CWD1
000592 940e 065e 	CALL __PUTPARD1
000594 01d4      	MOVW R26,R8
000595 e0ea      	LDI  R30,LOW(10)
000596 e0f0      	LDI  R31,HIGH(10)
000597 940e 063a 	CALL __MODW21
000599 940e 061d 	CALL __CWD1
00059b 940e 065e 	CALL __PUTPARD1
00059d 01d3      	MOVW R26,R6
00059e e0ea      	LDI  R30,LOW(10)
00059f e0f0      	LDI  R31,HIGH(10)
0005a0 940e 0635 	CALL __DIVW21
0005a2 940e 061d 	CALL __CWD1
0005a4 940e 065e 	CALL __PUTPARD1
0005a6 01d3      	MOVW R26,R6
0005a7 e0ea      	LDI  R30,LOW(10)
0005a8 e0f0      	LDI  R31,HIGH(10)
0005a9 940e 063a 	CALL __MODW21
0005ab 940e 061d 	CALL __CWD1
0005ad 940e 065e 	CALL __PUTPARD1
0005af e188      	LDI  R24,24
0005b0 940e 0519 	CALL _sprintf
0005b2 966c      	ADIW R28,28
0005b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0005b4 940e 02f9 	CALL _lcd_clear
0005b6 e0e0      	LDI  R30,LOW(0)
0005b7 93ea      	ST   -Y,R30
0005b8 e0a0      	LDI  R26,LOW(0)
0005b9 940c 02e8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
0005bb 91e0 027c 	LDS  R30,_new_key
0005bd 91f0 027d 	LDS  R31,_new_key+1
0005bf 9730      	SBIW R30,0
0005c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0005c1 e0e0      	LDI  R30,LOW(0)
0005c2 93e0 027c 	STS  _new_key,R30
0005c4 93e0 027d 	STS  _new_key+1,R30
0005c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
0005c7 0fa2      	ADD  R26,R18
0005c8 1fb3      	ADC  R27,R19
0005c9 e2ea      	LDI  R30,LOW(42)
0005ca 93ec      	ST   X,R30
0005cb 91e0 027e 	LDS  R30,_pressed_key
0005cd 91f0 027f 	LDS  R31,_pressed_key+1
0005cf 93fa      	ST   -Y,R31
0005d0 93ea      	ST   -Y,R30
0005d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0005d2 940e 02dc 	CALL __lcd_write_data
0005d4 e0a3      	LDI  R26,LOW(3)
0005d5 e0b0      	LDI  R27,0
0005d6 940c 060b 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x8:
0005d8 e3a0      	LDI  R26,LOW(48)
0005d9 940e 02c8 	CALL __lcd_write_nibble_G100
                +
0005db e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0005dc 958a     +DEC R24
0005dd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0005de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
0005df 932a      	ST   -Y,R18
0005e0 85ad      	LDD  R26,Y+13
0005e1 85be      	LDD  R27,Y+13+1
0005e2 85ef      	LDD  R30,Y+15
0005e3 89f8      	LDD  R31,Y+15+1
0005e4 9509      	ICALL
0005e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
0005e6 89e8      	LDD  R30,Y+16
0005e7 89f9      	LDD  R31,Y+16+1
0005e8 9734      	SBIW R30,4
0005e9 8be8      	STD  Y+16,R30
0005ea 8bf9      	STD  Y+16+1,R31
0005eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0005ec 85ad      	LDD  R26,Y+13
0005ed 85be      	LDD  R27,Y+13+1
0005ee 85ef      	LDD  R30,Y+15
0005ef 89f8      	LDD  R31,Y+15+1
0005f0 9509      	ICALL
0005f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
0005f2 89a8      	LDD  R26,Y+16
0005f3 89b9      	LDD  R27,Y+16+1
0005f4 9614      	ADIW R26,4
0005f5 940e 0656 	CALL __GETW1P
0005f7 83ee      	STD  Y+6,R30
0005f8 83ff      	STD  Y+6+1,R31
0005f9 81ae      	LDD  R26,Y+6
0005fa 81bf      	LDD  R27,Y+6+1
0005fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
0005fc 89a8      	LDD  R26,Y+16
0005fd 89b9      	LDD  R27,Y+16+1
0005fe 9614      	ADIW R26,4
0005ff 940e 0656 	CALL __GETW1P
000601 87ea      	STD  Y+10,R30
000602 87fb      	STD  Y+10+1,R31
000603 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000604 01de      	MOVW R26,R28
000605 961c      	ADIW R26,12
000606 940e 0615 	CALL __ADDW2R15
000608 940e 0656 	CALL __GETW1P
00060a 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00060b 9610      	adiw r26,0
00060c f039      	breq __delay_ms1
                 __delay_ms0:
                +
00060d ef8a     +LDI R24 , LOW ( 0xFA )
00060e e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00060f 9701     +SBIW R24 , 1
000610 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000611 95a8      	wdr
000612 9711      	sbiw r26,1
000613 f7c9      	brne __delay_ms0
                 __delay_ms1:
000614 9508      	ret
                 
                 __ADDW2R15:
000615 2400      	CLR  R0
000616 0daf      	ADD  R26,R15
000617 1db0      	ADC  R27,R0
000618 9508      	RET
                 
                 __ANEGW1:
000619 95f1      	NEG  R31
00061a 95e1      	NEG  R30
00061b 40f0      	SBCI R31,0
00061c 9508      	RET
                 
                 __CWD1:
00061d 2f6f      	MOV  R22,R31
00061e 0f66      	ADD  R22,R22
00061f 0b66      	SBC  R22,R22
000620 2f76      	MOV  R23,R22
000621 9508      	RET
                 
                 __DIVW21U:
000622 2400      	CLR  R0
000623 2411      	CLR  R1
000624 e190      	LDI  R25,16
                 __DIVW21U1:
000625 0faa      	LSL  R26
000626 1fbb      	ROL  R27
000627 1c00      	ROL  R0
000628 1c11      	ROL  R1
000629 1a0e      	SUB  R0,R30
00062a 0a1f      	SBC  R1,R31
00062b f418      	BRCC __DIVW21U2
00062c 0e0e      	ADD  R0,R30
00062d 1e1f      	ADC  R1,R31
00062e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00062f 60a1      	SBR  R26,1
                 __DIVW21U3:
000630 959a      	DEC  R25
000631 f799      	BRNE __DIVW21U1
000632 01fd      	MOVW R30,R26
000633 01d0      	MOVW R26,R0
000634 9508      	RET
                 
                 __DIVW21:
000635 d012      	RCALL __CHKSIGNW
000636 dfeb      	RCALL __DIVW21U
000637 f40e      	BRTC __DIVW211
000638 dfe0      	RCALL __ANEGW1
                 __DIVW211:
000639 9508      	RET
                 
                 __MODW21:
00063a 94e8      	CLT
00063b ffb7      	SBRS R27,7
00063c c004      	RJMP __MODW211
00063d 95a0      	COM  R26
00063e 95b0      	COM  R27
00063f 9611      	ADIW R26,1
000640 9468      	SET
                 __MODW211:
000641 fdf7      	SBRC R31,7
000642 dfd6      	RCALL __ANEGW1
000643 dfde      	RCALL __DIVW21U
000644 01fd      	MOVW R30,R26
000645 f40e      	BRTC __MODW212
000646 dfd2      	RCALL __ANEGW1
                 __MODW212:
000647 9508      	RET
                 
                 __CHKSIGNW:
000648 94e8      	CLT
000649 fff7      	SBRS R31,7
00064a c002      	RJMP __CHKSW1
00064b dfcd      	RCALL __ANEGW1
00064c 9468      	SET
                 __CHKSW1:
00064d ffb7      	SBRS R27,7
00064e c006      	RJMP __CHKSW2
00064f 95a0      	COM  R26
000650 95b0      	COM  R27
000651 9611      	ADIW R26,1
000652 f800      	BLD  R0,0
000653 9403      	INC  R0
000654 fa00      	BST  R0,0
                 __CHKSW2:
000655 9508      	RET
                 
                 __GETW1P:
000656 91ed      	LD   R30,X+
000657 91fc      	LD   R31,X
000658 9711      	SBIW R26,1
000659 9508      	RET
                 
                 __GETW1PF:
00065a 9005      	LPM  R0,Z+
00065b 91f4      	LPM  R31,Z
00065c 2de0      	MOV  R30,R0
00065d 9508      	RET
                 
                 __PUTPARD1:
00065e 937a      	ST   -Y,R23
00065f 936a      	ST   -Y,R22
000660 93fa      	ST   -Y,R31
000661 93ea      	ST   -Y,R30
000662 9508      	RET
                 
                 __SAVELOCR6:
000663 935a      	ST   -Y,R21
                 __SAVELOCR5:
000664 934a      	ST   -Y,R20
                 __SAVELOCR4:
000665 933a      	ST   -Y,R19
                 __SAVELOCR3:
000666 932a      	ST   -Y,R18
                 __SAVELOCR2:
000667 931a      	ST   -Y,R17
000668 930a      	ST   -Y,R16
000669 9508      	RET
                 
                 __LOADLOCR6:
00066a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00066b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00066c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00066d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00066e 8119      	LDD  R17,Y+1
00066f 8108      	LD   R16,Y
000670 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000671 0fac      	ADD  R26,R28
000672 1fbd      	ADC  R27,R29
                 __INITLOC0:
000673 9005      	LPM  R0,Z+
000674 920d      	ST   X+,R0
000675 958a      	DEC  R24
000676 f7e1      	BRNE __INITLOC0
000677 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  29 r1 :   7 r2 :   0 r3 :   0 r4 :   0 r5 :   6 r6 :   7 r7 :   3 
r8 :   7 r9 :   3 r10:   7 r11:   3 r12:   5 r13:   4 r14:   0 r15:   6 
r16:  39 r17:  39 r18:  45 r19:  22 r20:   9 r21:  17 r22:  23 r23:   4 
r24:  39 r25:  12 r26: 185 r27:  69 r28:  35 r29:   2 r30: 350 r31: 108 
x  :  32 y  : 242 z  :  18 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :  12 
adiw  :  46 and   :   0 andi  :  13 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  25 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  46 brpl  :   2 brsh  :   3 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 111 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  27 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :  14 cpc   :  10 cpi   :  37 cpse  :   0 dec   :  11 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  25 inc   :   2 jmp   :  25 ld    :  59 ldd   :  79 ldi   : 178 
lds   :  13 lpm   :  17 lsl   :   1 lsr   :   0 mov   :  31 movw  :  47 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :  17 out   :  39 pop   :   3 push  :   3 rcall :  34 ret   :  38 
reti  :   4 rjmp  :  78 rol   :   3 ror   :   0 sbc   :   4 sbci  :   7 
sbi   :  15 sbic  :   2 sbis  :   0 sbiw  :  23 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 105 std   :  35 sts   :  15 sub   :   3 subi  :  26 swap  :   1 
tst   :   6 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000cf0   3078    234   3312   32768  10.1%
[.dseg] 0x000060 0x00028b      0     43     43    2048   2.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 14 warnings
